#!/bin/bash
#
# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * the branch/status of the current git repository
#    * the branch of the current subversion repository
#    * the return value of the previous command
#
# USAGE:
#
#   1. Save this file as ~/.bash_prompt
#   2. Add the following line to the end of your ~/.profile or ~/.bash_profile:
#        . ~/.bash_prompt
#
# EXAMPLE:
#
#   root @ server in ~/projects/dotfiles/ (master)↑
#   $
#
#   {BOLD}{RED}root{WHITE} @ {ORANGE}server{WHITE} in {PURPLE}~/projects/dotfiles {RED|YELLOW|GREEN} (master)↑
#   {RESET}$
#
# AUTHOR:
#
#   Rob Taylor <manix84@gmail.com>
#
#   Based on work by halbtuerke, lakiolen and Scott Woods (https://gist.github.com/31967)


if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
        RED=$(tput setaf 9)
        YELLOW=$(tput setaf 226)
        ORANGE=$(tput setaf 172)
        GREEN=$(tput setaf 82)
        PURPLE=$(tput setaf 141)
        WHITE=$(tput setaf 256)
    else
        RED=$(tput setaf 5)
        ORANGE=$(tput setaf 4)
        GREEN=$(tput setaf 2)
        YELLOW=$(tput setaf 3)
        PURPLE=$(tput setaf 1)
        WHITE=$(tput setaf 7)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    RED="\033[1;31m"
    ORANGE="\033[1;33m"
    GREEN="\033[1;32m"
    YELLOW="\033[1;33m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    BOLD=""
    RESET="\033[m"
fi

export RED
export ORANGE
export GREEN
export YELLOW
export PURPLE
export WHITE
export BOLD
export RESET

# Detect whether the current directory is a git repository.
function is_git_repository {
    git branch > /dev/null 2>&1
}

# Detect whether the current directory is a subversion repository.
function is_svn_repository {
    test -d .svn
}

# Determine the branch/state information for this git repository.
function set_git_branch {
    # Capture the output of the "git status" command.
    git_status="$(git status 2> /dev/null)"

    # Set color based on clean/staged/dirty.
    if [[ ${git_status} =~ "working directory clean" ]]; then
        state="${GREEN}"
    elif [[ ${git_status} =~ "Changes to be committed" ]]; then
        state="${YELLOW}"
    else
        state="${RED}"
    fi

    # Set arrow icon based on status against remote.
    remote_pattern="# Your branch is (.*) of"
    if [[ ${git_status} =~ ${remote_pattern} ]]; then
        if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
            remote="[↑]"
        else
            remote="[↓]"
        fi
    else
        remote=""
    fi
    diverge_pattern="# Your branch and (.*) have diverged"
    if [[ ${git_status} =~ ${diverge_pattern} ]]; then
        remote="[↕]"
    fi

    # Get the name of the branch.
    branch_pattern="^# On branch ([^${IFS}]*)"
    if [[ ${git_status} =~ ${branch_pattern} ]]; then
        branch=${BASH_REMATCH[1]}
    fi

    # Set the final branch string.
    BRANCH="${state}${branch}${remote}${RESET} "
}

# Determine the branch information for this subversion repository. No support
# for svn status, since that needs to hit the remote repository.
function set_svn_branch {

    # # Capture the output of the "svn status" command.
    # svn_status="$(svn status -u 2> /dev/null)"

    # svn_base_rev="$(svn info | grep -i 'Last Changed Rev')"
    # svn_head_rev="$(svn info -r HEAD | grep -i 'Last Changed Rev')"

    # # Set color based on clean/staged/dirty.
    # if [[ ${svn_base_rev} != ${svn_head_rev} ]]; then
    #     state="${YELLOW}"
    #     remote="↓"
    # else
    #     remote=""
    # fi
    # if [[ ${svn_status} !=~ "M  " ]]; then
    #     remote="↕"
    # elif [[ ${svn_status} !=~ "M" ]]; then
    #     state="${YELLOW}"
    #     remote="↑"
    # elif [[ ${svn_status} !=~ "  * " ]]; then
    #     state="${YELLOW}"
    #     remote="↓"
    # elif [[ ${svn_status} =~ "C  " ]]; then
    #     state="${RED}"
    #     remote="!"
    # else
    #     remote=""
    #     state="${GREEN}"
    # fi

    # Capture the output of the "git status" command.
    svn_info="$(svn info | egrep '^URL: ' 2> /dev/null)"

    # Get the name of the branch.
    branch_pattern="^URL: .*/(branches|tags)/([^/]+)"
    trunk_pattern="^URL: .*/trunk(/.*)?$"
    if [[ ${svn_info} =~ $branch_pattern ]]; then
        branch=${BASH_REMATCH[2]}
        state=${YELLOW}
    elif [[ ${svn_info} =~ $trunk_pattern ]]; then
        branch='trunk'
        state=${GREEN}
    fi

    # Set the final branch string.
    # BRANCH="${state}(${branch})${remote}${RESET} "
    BRANCH="${state}${branch}${RESET} "
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
    # if test $1 -eq 0 ; then
    PROMPT_SYMBOL="\$"
    # else
    #     PROMPT_SYMBOL="${RED}\$${RESET}"
    # fi
}

# Set the full bash prompt.
function set_bash_prompt () {
    # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
    # return value of the last command.
    set_prompt_symbol $?

    # Set the BRANCH variable.
    if is_git_repository ; then
        set_git_branch
    elif is_svn_repository ; then
        set_svn_branch
    else
        BRANCH=''
    fi

    # Set the bash prompt variable.
    PS1="${BOLD}${RED}\u${WHITE} @ ${ORANGE}\h${WHITE} in ${PURPLE}\w ${BRANCH} ${RESET}\n${PROMPT_SYMBOL} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt