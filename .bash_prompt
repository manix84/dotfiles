#!/bin/bash
#
# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * the branch/status of the current git repository
#    * the branch of the current subversion repository
#    * the return value of the previous command
#
# USAGE:
#
#   1. Save this file as ~/.bash_prompt
#   2. Add the following line to the end of your ~/.profile or ~/.bash_profile:
#        . ~/.bash_prompt
#
# EXAMPLE 1:
#
#   root @ server in ~/projects/dotfiles/ on master [↑]
#   $
#
#   {BOLD}{RED}root{WHITE} at {ORANGE}server{WHITE} in {PURPLE}~/projects/dotfiles {WHITE} on {RED|YELLOW|GREEN} master [↑]
#   {RESET}$
#
# EXAMPLE 2:
#
#   root @ server in ~/projects
#   $
#
#   {BOLD}{RED}root{WHITE} at {ORANGE}server{WHITE} in {PURPLE}~/projects
#   {RESET}$
#
# AUTHOR:
#
#   Rob Taylor <manix84@gmail.com>
#
#   Based on work by halbtuerke, lakiolen and Scott Woods (https://gist.github.com/31967)
#   @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
#   Shamelessly copied from https://github.com/gf3/dotfiles
#   Screenshot: http://i.imgur.com/s0Blh.png

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
    tput sgr0
    BLACK=$(tput setaf 0)
    DARK_RED=$(tput setaf 1)
    DARK_GREEN=$(tput setaf 2)
    DARK_YELLOW=$(tput setaf 3)
    DARK_BLUE=$(tput setaf 4)
    DARK_MAGENTA=$(tput setaf 5)
    DARK_CYAN=$(tput setaf 6)
    GREY=$(tput setaf 7)
    DARK_GREY=$(tput setaf 8)
    RED=$(tput setaf 9)
    GREEN=$(tput setaf 10)
    YELLOW=$(tput setaf 11)
    BLUE=$(tput setaf 12)
    MAGENTA=$(tput setaf 13)
    CYAN=$(tput setaf 14)
    WHITE=$(tput setaf 15)

    PURPLE=$(tput setaf 5)
    ORANGE=$(tput setaf 4)

    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
        ORANGE=$(tput setaf 172)
        PURPLE=$(tput setaf 141)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    BLACK="\033[2;30m"
    DARK_RED="\033[2;31m"
    DARK_GREEN="\033[2;32m"
    DARK_YELLOW="\033[2;33m"
    DARK_BLUE="\033[2;34m"
    DARK_MAGENTA="\033[2;35m"
    DARK_CYAN="\033[2;36m"
    GREY="\033[37m"
    DARK_GREY="\033[2;37m"
    RED="\033[0;31m"
    GREEN="\033[0;32m"
    YELLOW="\033[0;33m"
    BLUE="\033[0;34m"
    MAGENTA="\033[0;35m"
    CYAN="\033[0;36m"
    WHITE="\033[0;37m"

    ORANGE="\033[2;33m"
    PURPLE="\033[0;35m"

    BOLD="\033[1m"
    RESET="\033[m"
fi

C=${CYAN}
M=${MAGENTA}
Y=${YELLOW}
K=${BLACK}
R=${RED}
B=${BLUE}
G=${GREEN}
W=${WHITE}
RST=${RESET}
BLD=${BOLD}

# export BLACK
# export DARK_RED
# export DARK_GREEN
# export DARK_YELLOW
# export DARK_BLUE
# export DARK_MAGENTA
# export DARK_CYAN
# export GREY
# export DARK_GREY
# export RED
# export GREEN
# export YELLOW
# export BLUE
# export MAGENTA
# export CYAN
# export WHITE
# export ORANGE
# export PURPLE
# export BOLD
# export RESET

# Detect whether the current directory is a git repository.
function is_git_repository {
    git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function get_git_branch_name() {
    # Capture the output of the "git status" command.
    local git_status="$(git -c color.status=false status 2> /dev/null)"

    local branch_name="???"
    local joiner="on"
    local extra=""

    # Get the name of the branch.
    local branch_name_pattern="On branch ([^[:space:]]+)"
    local detatched_pattern="([0-9a-zA-Z]+) detached at ([0-9a-zA-Z]+)"
    local rebase_pattern="rebasing branch '([^[:space:]]+)' on '([^[:space:]]+)'"

    if [[ ${git_status} =~ ${branch_name_pattern} ]]; then
        branch_name=${BASH_REMATCH[1]}
    elif [[ ${git_status} =~ ${detatched_pattern} ]]; then
        branch_name=${BASH_REMATCH[1]}
        joiner="detatched from"
        extra="(${BASH_REMATCH[2]})"
    elif [[ ${git_status} =~ ${rebase_pattern} ]]; then
        branch_name=${BASH_REMATCH[1]}
        joiner="rebasing"
        extra="(${BASH_REMATCH[2]})"
    fi

    local branch_remote_pattern="with 'origin/"
    local is_remote_branch=false
    if [[ ${git_status} =~ ${branch_remote_pattern} ]]; then
        is_remote_branch=true
    fi

    local cherry_pick_pattern="cherry-picking commit ([0-9a-z]+)"
    if [[ ${git_status} =~ ${cherry_pick_pattern} ]]; then
        joiner="cherry-picking"
        extra="on ${BASH_REMATCH[1]}"
    fi

    # Set color based on clean/staged/dirty
    local git_state_indicator="${G}"
    if [[ ${git_status} =~ "Changes not staged for commit" ]]; then
        git_state_indicator="${R}"
    elif [[ ${git_status} =~ "Changes to be committed" ]]; then
        git_state_indicator="${Y}"
    fi

    # Set arrow icon based on status against remote.
    local remote_state=""
    if [[ is_remote_branch ]]; then
        local remote_pattern="Your branch is (ahead|behind)"
        if [[ ${git_status} =~ ${remote_pattern} ]]; then
            if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
                remote_state="[↑]"
            elif [[ ${BASH_REMATCH[1]} == "behind" ]]; then
                remote_state="[↓]"
            fi
        fi
        local diverge_pattern="Your branch and (.*) have diverged"
        if [[ ${git_status} =~ ${diverge_pattern} ]]; then
            remote_state="[↕]"
        fi
    else
        remote_state="${R}[L]"
    fi

    # Set the final branch string.
    echo "${RST} ${joiner} ${git_state_indicator}${branch_name}${remote_state}${RST} ${extra}"
}
function get_branch_name() {
    if is_git_repository ; then
        echo $(get_git_branch_name)
    fi
    echo ""
}
export PS1="${BLD}${R}\u ${RST}at ${BLD}${ORANGE}\H ${RST}in ${BLD}${PURPLE}\w$(get_branch_name)\n${RST}\$ "
export PS2="${ORANGE}→${RST} "
